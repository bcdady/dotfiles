{{- if eq .chezmoi.os "darwin" -}}
#!/bin/bash
echo "$0"

# Check if running on macOS
if [ "$(uname)" != "Darwin" ]; then
    echo "Error: This script is intended for macOS" >&2
    exit 1
fi

if [ "$1" = "-force" ]; then FORCE_UPDATE=true; fi
function confirm {

  if [ "$1" ]; then _prompt="$1"; else _prompt="Are you sure"; fi
  _prompt="$_prompt [y/n] ?"

  # Loop forever until the user enters a valid response (Y/N or Yes/No).
  read -rs -k 1 "$_prompt " _response
  while 1; do
    case "${_response}" in
    [Yy][Ee][Ss] | [Yy]) # Yes or Y (case-insensitive).
      return 1
      ;;
    [Nn][Oo] | [Nn]) # No or N.
      return 0
      ;;
    *) # Anything else (including a blank) is invalid.
      ;;
    esac
  done
}

# Thanks to both http://onyxmueller.net/2018/08/31/scheduling-commands-with-cron-on-your-mac/
# and https://medium.com/@waxzce/keeping-macos-clean-this-is-my-osx-brew-update-cli-command-6c8f12dc1731

BREW_UPDATE=true
BREW_STATUS_FILE="$HOME/.brew_updated"

# Look for a file with a recent date, where latest status of HomeBrew update can be shared across shell environments
# If not found, or older than 3 days, then set BREW_UPDATE == true

# Check file exists
if [ -f "$BREW_STATUS_FILE" ]; then
  # get today's date for reference
  TODAY="$(date -j +%Y%m%d)"
  #echo "Today is $TODAY"
  # check file modified date
  BREWMOD=$(date -j -r "$BREW_STATUS_FILE" +"%Y%m%d")

  # check if BREWMOD UPDATE_DATE is TODAY
  UPDATE_DATE=$(date -j -v+10d -f "%Y%m%d" "$BREWMOD" +"%Y%m%d")
  #echo "UPDATE_DATE is $UPDATE_DATE"
  # calculate if $TODAY is at or past n days since $BREWMOD
  if test "$TODAY" -lt "$UPDATE_DATE"; then
    # echo "BREW_UPDATE=false"
    BREW_UPDATE=false
  fi
fi

echo "Homebrew was last updated on $(date -j -f "%Y%m%d" "$BREWMOD" +"%m-%d-%y")"

if [[ $BREW_UPDATE == true || $FORCE_UPDATE == true ]]; then
  echo -e "! $(date -u +"%Y-%m-%dT%H:%M:%SZ") Start Homebrew maintenance." | tee -a "$BREW_STATUS_FILE"

  echo -e "! $(date -u +"%Y-%m-%dT%H:%M:%SZ") brew update" | tee -a "$BREW_STATUS_FILE"
  brew update | tee -a "$BREW_STATUS_FILE" # Fetch the newest version of Homebrew and all formulae from GitHub using `git`(1) and

  echo -e "! $(date -u +"%Y-%m-%dT%H:%M:%SZ") brew cleanup" | tee -a "$BREW_STATUS_FILE"
  brew cleanup -s | tee -a "$BREW_STATUS_FILE" # Remove stale lock files and outdated downloads for all formulae and casks, and remove

  echo -e "! $(date -u +"%Y-%m-%dT%H:%M:%SZ") brew upgrade" | tee -a "$BREW_STATUS_FILE"
  brew upgrade | tee -a "$BREW_STATUS_FILE" #Upgrade outdated casks and outdated, unpinned formulae using the same options they we

  echo -e "! $(date -u +"%Y-%m-%dT%H:%M:%SZ") brew upgrade --cask" | tee -a "$BREW_STATUS_FILE"
  brew upgrade --cask | tee -a "$BREW_STATUS_FILE" # brew cask upgrade

  echo -e "! $(date -u +"%Y-%m-%dT%H:%M:%SZ") brew autoremove" | tee -a "$BREW_STATUS_FILE"
  brew autoremove | tee -a "$BREW_STATUS_FILE" # Uninstall formulae that were only installed as a dependency of another formula and ar

  echo -e "! $(date -u +"%Y-%m-%dT%H:%M:%SZ") Done." | tee -a "$BREW_STATUS_FILE"

else
  echo "Homebrew was already updated recently"
fi
# Truncate log to the last 1000 lines
echo -e "$(tail -1000 "$BREW_STATUS_FILE")" >"$BREW_STATUS_FILE"
{{- end }}
