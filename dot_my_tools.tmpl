#!/bin/bash
echo "Starting .my_tools"

{{- if eq .chezmoi.os "linux" }}
if [[ "$TERM_PROGRAM" != "WarpTerminal" ]]; then
  echo 'Configuring shell history'
  # Set up Shell History
  # hstr --show-configuration
  alias hh=hstr                 # hh to be alias for hstr
  shopt -s histappend           # append new history items to .bash_history
  export HISTCONTROL=ignoreboth # leading space hides commands from history
  export HISTFILESIZE=10000     # increase history file size (default is 500)
  export HISTIGNORE='rm *:history*:printenv*'
  export HISTSIZE=${HISTFILESIZE} # increase history size (default is 500)
  export HSTR_CONFIG=hicolor      # get more colors

  # ensure synchronization between bash memory and history file
  export PROMPT_COMMAND="history -a; history -n; ${PROMPT_COMMAND}"
  # if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
  if [[ $- =~ .*i.* ]]; then bind '"\C-r": "\C-a hstr -- \C-j"'; fi
  # if this is interactive shell, then bind 'kill last command' to Ctrl-x k
  if [[ $- =~ .*i.* ]]; then bind '"\C-xk": "\C-a hstr -k \C-j"'; fi
fi
{{- end }}

# activate mise (replacement for aqua, asdf)
eval "$(~/.local/bin/mise activate bash)"

# In ../tools/homebrew, no more than once daily, brew commands are run
[[ -f "${HOME}/.tools/homebrew" ]] && bash "${HOME}/.tools/homebrew" || echo "No homebrew maintenance script found"

# turn on git cli completion, if not already provided in Warp terminal
# shellcheck disable=SC1091
test "$TERM_PROGRAM" = "WarpTerminal" || source /usr/share/bash-completion/completions/git

# aws cli autocomplete, with aws installed via mise
if command -v aws >/dev/null 2>&1; then
  test "$TERM_PROGRAM" = "WarpTerminal" || complete -C "$(mise which aws)" aws
fi

# create jwt-decode tool / function
jwt-decode() {
  jq -R 'split(".") |.[0:2] | map(@base64d) | map(fromjson)' <<<$1
}

# bw node error message workaround
# https://github.com/bitwarden/clients/issues/6689#issuecomment-1787609205
alias bw='NODE_OPTIONS="--no-deprecation" bw'

# Lazy-load Bitwarden - only check when needed
bw-check() {
  test "$(command -v bw)" || {
    echo 'Bitwarden (bw command) Not Found'
    return 1
  }
  BW_STATUS=$(bw status | jq -r .status 2>/dev/null)
  echo "Bitwarden Status: ${BW_STATUS}"
  [[ "$BW_STATUS" == "unlocked" ]] || echo "Run 'bw unlock' to unlock vault"
}

echo ''
{{- if eq .chezmoi.os "linux" }}
test "$TERM_PROGRAM" = "WarpTerminal" || test -f ~/.resh/shellrc || curl -fsSL https://raw.githubusercontent.com/curusarn/resh/master/scripts/rawinstall.sh | bash
{{- end }}

# list available versions of python
# echo 'Available python (3) versions / updates:'
# mise ls-remote python | grep -E '^3\.[0-9]{1,3}\.[0-9]{1,3}$' | tail -n 10
# # check which python is active via mise
# echo ''
# echo 'Current python version:'
# mise current python
# # Make sure python pip is up to date
# echo 'Upgrade PIP'
# command -v python3 && python3 -m pip install --user --upgrade pip

# echo ''
{{- if eq .chezmoi.os "linux" }}
# configure vpn aliases for CLI on linux

# OpenVPN CLI
# shellcheck disable=SC2139
alias vpn="$(command -v openvpn3)"
vpnprofile='subsplash_pdx'
alias vpnc='vpn session-start -c $vpnprofile &> /dev/null && vpn sessions-list'
alias vpnd='vpn session-manage -D --config $vpnprofile' # $(vpn sessions-list | grep Path | head -n 1 | cut -d ":" -f2 | tr -d [:space:])'
alias vpns='vpn sessions-list'

# VPN status check - run 'vpns' to check status

# also, if eq .chezmoi.os "linux"
# https://starship.rs
if [[ "$TERM_PROGRAM" != "WarpTerminal" ]]; then
  echo 'Initializing starship'
  command -v starship || curl -sS https://starship.rs/install.sh | sh
  eval "$(starship init bash)"
fi
{{- end }}

# Use AWS CLI to setup kubeconfig if necessary
if [[ $(grep -c sap-prod ~/.kube/config) -eq 0 ]]; then
  echo "Updating kubeconfig via aws eks"
  for cluster in $(aws eks list-clusters --query 'clusters[*]' --output text); do
    echo "aws eks update-kubeconfig --name ${cluster}"
  done
fi

function getconfig() {
  kubectl exec "$(kubectl get pods --namespace app-"${1}" -o name | head -n 1)" --namespace app-"${1}" -c app-base-http -- cat /go/config/"${1}".json
}

# Enable kubectl autocomplete
echo "Enable kubectl autocomplete"
command -v kubectl && complete -o default -F __start_kubectl kubectl
echo "Enable 'k' (alias) autocomplete"
command -v kubectl && complete -o default -F __start_kubectl k

# test "$TERM_PROGRAM" = "WarpTerminal" || command -v kubectl && source <(kubectl completion bash)

# Enable terraform autocomplete
command -v terraform && complete -C "$(mise which terraform)" terraform
